#! /usr/bin/env python

from __future__ import print_function, division, absolute_import

import base64
import os
import pdb
import json
import xmltodict
import gitlab
import xml.parsers.expat
import urlparse

private_token = os.environ['GITLAB_TOKEN']
GITLAB_HOST = 'https://gitlab.cern.ch'


class GitlabSiteconf(gitlab.Gitlab):
    def __init__(self):
        self.glc = super(GitlabSiteconf, self).__init__(GITLAB_HOST, private_token=private_token)
        self.projects = group.projects.list(all=True)

    def seinfo(self,pnn=None, probes=None, protocol=None, tfc=None):

        if pnn.startswith('T3'):
            raise NotImplementedError('%s is a Tier3. Not ready to deal with those yet.' % pnn)

        project = None
        for p in self.projects:
            if p.name == pnn:
                project = p
                break
        if not project:
            raise RuntimeError('Project %s could not be found in GitLab' % pnn)

        full_project = self.glc.projects.get(project.id)

        try:
            f = full_project.files.get('PhEDEx/storage.xml', 'master')
            storage_xml = base64.b64decode(f.content)
            try:
                site_conf = xmltodict.parse(storage_xml)
            except xml.parsers.expat.ExpatError:
                raise RuntimeError('Error parsing', project.name, 'XML: %s' % storage_xml)

            protos = []

            rse_info = {}

            try:
                mappings = site_conf['storage-mapping']['lfn-to-pfn']
                if not isinstance(mappings, list):
                    mappings = [mappings]
                for mapping in mappings:
                    if mapping['@protocol'] == 'srmv2':
                        if mapping['@path-match'].find('LoadTest') > -1:
                            continue

                        o = urlparse.urlparse(mapping['@result'])

                        rse_info['protocol'] = o.scheme
                        rse_info['hostname'] = o.hostname
                        rse_info['port'] = o.port

                        query_prefix, pattern = o.query.split('=', 1)

                        rse_info['webpath'] = o.path + '?' + query_prefix
                        rse_info['prefix'] = '/cms'

                        # proto = {}
                        # proto.update({'path': mapping['@path-match']})
                        # proto.update({'out': mapping['@result']})
                        # proto.update({'proto': mapping['@protocol']})
                        # protos.append(proto)
                # ext_attr = json.loads(json.dumps({'tfc_proto': 'srmv2', 'tfc': protos}))
                # print(project.name, ':', ext_attr)

                # try:
                #     attributes = rucio.get_rse(project.name)
                #     rucio_attributes = attributes['protocols'][0]['extended_attributes']
                #     print('For %s would set \n%s vs \n%s' % (project.name, ext_attr, rucio_attributes))
                # except:
                #     print("Error: no comparison for", project.name)
                # if not protos:
                #     pdb.set_trace()
            except TypeError:
                raise RuntimeError('Error', project.name, 'does not contain storage mapping, lfn-to-pfn, or @protocol', storage_xml)

        except gitlab.exceptions.GitlabGetError:
            pass

        # returns {'protocol': u'srm', 'hostname': u'srm01.ncg.ingrid.pt', 'prefix': u'/cms', 'webpath': u'/srm/managerv2?SFN=', 'port': 8444}

