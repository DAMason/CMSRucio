#! /usr/bin/env python

from __future__ import print_function, division, absolute_import

import base64
import os
import pdb
import json
import xmltodict
import gitlab
import xml.parsers.expat
from rucio.client.client import Client as RucioClient

rucio = RucioClient()

private_token = os.environ['GITLAB_TOKEN']

gl = gitlab.Gitlab('https://gitlab.cern.ch', private_token=private_token)

group = gl.groups.get('siteconf')

projects = group.projects.list(all=True)

for project in projects:
    full_project = gl.projects.get(project.id)
    if project.name.startswith('T3'):
        continue
    try:
        f = full_project.files.get('PhEDEx/storage.xml', 'master')
        storage_xml = base64.b64decode(f.content)
        try:
            site_conf = xmltodict.parse(storage_xml)
        except xml.parsers.expat.ExpatError:
            print('Error parsing', project.name, 'XML: %s' % storage_xml)

        protos = []

        try:
            mappings = site_conf['storage-mapping']['lfn-to-pfn']
            if not isinstance(mappings, list):
                mappings = [mappings]
            for mapping in mappings:
                if mapping['@protocol'] == 'srmv2':
                    proto = {}
                    if mapping['@path-match'].find('LoadTest') > -1:
                        continue
                    proto.update({'path': mapping['@path-match']})
                    proto.update({'out': mapping['@result']})
                    proto.update({'proto': mapping['@protocol']})
                    protos.append(proto)
            ext_attr = json.loads(json.dumps({'tfc_proto': 'srmv2', 'tfc': protos}))
            print(project.name, ':', ext_attr)

            try:
                attributes = rucio.get_rse(project.name)
                rucio_attributes = attributes['protocols'][0]['extended_attributes']
                print('For %s would set \n%s vs \n%s' % (project.name, ext_attr, rucio_attributes))
            except:
                print("Error: no comparison for", project.name)
            if not protos:
                pdb.set_trace()
        except TypeError:
            print('Error', project.name, 'does not contain storage mapping, lfn-to-pfn, or @protocol', storage_xml)

    except gitlab.exceptions.GitlabGetError:
        pass
